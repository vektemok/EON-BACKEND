// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: station_query.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStation = `-- name: CreateStation :one
INSERT INTO stations (
    station_id, latitude, longitude, address, station_name,
    station_type, available_at, connectors, power_kw,
    price, price_unit, price_currency
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9,
    $10, $11, $12
)
RETURNING station_id, latitude, longitude, address, station_name, station_type, available_at, connectors, power_kw, price, price_unit, price_currency
`

type CreateStationParams struct {
	StationID     string
	Latitude      float64
	Longitude     float64
	Address       pgtype.Text
	StationName   pgtype.Text
	StationType   pgtype.Text
	AvailableAt   pgtype.Timestamp
	Connectors    []string
	PowerKw       float64
	Price         float64
	PriceUnit     string
	PriceCurrency string
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, createStation,
		arg.StationID,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.StationName,
		arg.StationType,
		arg.AvailableAt,
		arg.Connectors,
		arg.PowerKw,
		arg.Price,
		arg.PriceUnit,
		arg.PriceCurrency,
	)
	var i Station
	err := row.Scan(
		&i.StationID,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.StationName,
		&i.StationType,
		&i.AvailableAt,
		&i.Connectors,
		&i.PowerKw,
		&i.Price,
		&i.PriceUnit,
		&i.PriceCurrency,
	)
	return i, err
}

const deleteStation = `-- name: DeleteStation :exec
DELETE FROM stations
WHERE station_id = $1
`

func (q *Queries) DeleteStation(ctx context.Context, stationID string) error {
	_, err := q.db.Exec(ctx, deleteStation, stationID)
	return err
}

const getStation = `-- name: GetStation :one
SELECT station_id, latitude, longitude, address, station_name, station_type, available_at, connectors, power_kw, price, price_unit, price_currency FROM stations
WHERE station_id = $1
`

func (q *Queries) GetStation(ctx context.Context, stationID string) (Station, error) {
	row := q.db.QueryRow(ctx, getStation, stationID)
	var i Station
	err := row.Scan(
		&i.StationID,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.StationName,
		&i.StationType,
		&i.AvailableAt,
		&i.Connectors,
		&i.PowerKw,
		&i.Price,
		&i.PriceUnit,
		&i.PriceCurrency,
	)
	return i, err
}

const listStations = `-- name: ListStations :many
SELECT station_id, latitude, longitude, address, station_name, station_type, available_at, connectors, power_kw, price, price_unit, price_currency FROM stations
ORDER BY station_name
`

func (q *Queries) ListStations(ctx context.Context) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.StationID,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.StationName,
			&i.StationType,
			&i.AvailableAt,
			&i.Connectors,
			&i.PowerKw,
			&i.Price,
			&i.PriceUnit,
			&i.PriceCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStation = `-- name: UpdateStation :one
UPDATE stations
SET
    latitude = $2,
    longitude = $3,
    address = $4,
    station_name = $5,
    station_type = $6,
    available_at = $7,
    connectors = $8,
    power_kw = $9,
    price = $10,
    price_unit = $11,
    price_currency = $12
WHERE station_id = $1
RETURNING station_id, latitude, longitude, address, station_name, station_type, available_at, connectors, power_kw, price, price_unit, price_currency
`

type UpdateStationParams struct {
	StationID     string
	Latitude      float64
	Longitude     float64
	Address       pgtype.Text
	StationName   pgtype.Text
	StationType   pgtype.Text
	AvailableAt   pgtype.Timestamp
	Connectors    []string
	PowerKw       float64
	Price         float64
	PriceUnit     string
	PriceCurrency string
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, updateStation,
		arg.StationID,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.StationName,
		arg.StationType,
		arg.AvailableAt,
		arg.Connectors,
		arg.PowerKw,
		arg.Price,
		arg.PriceUnit,
		arg.PriceCurrency,
	)
	var i Station
	err := row.Scan(
		&i.StationID,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.StationName,
		&i.StationType,
		&i.AvailableAt,
		&i.Connectors,
		&i.PowerKw,
		&i.Price,
		&i.PriceUnit,
		&i.PriceCurrency,
	)
	return i, err
}
